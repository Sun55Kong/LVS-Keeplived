LVS原理及各种工作模式

    架构原理：
        LVS 集群分为三层结构:
            1、负载调度器(load balancer)：它是整个LVS 集群对外的前端机器，负责将client请求发送到一组服务器[多台LB IP]上执行
            2、服务器池(server pool)：一组真正执行client 请求的服务器，一般是我们的web服务器；除了web，还有FTP，MAIL，DNS
            3、共享存储(shared stored)：它为 server pool 提供了一个共享的存储区，很容易让服务器池拥有相同的内容，提供相同的服务
        LVS内核模型：
            client --> PREROUTING链 --> INPUT链 --> ipvs --> output --> POSTROUTING链 --> real server
            1.当客户端的请求到达负载均衡器的内核空间时，首先会到达PREROUTING链。
            2.当内核发现请求数据包的目的地址是本机时，将数据包送往INPUT链。
            3.LVS由用户空间的ipvsadm和内核空间的IPVS组成，ipvsadm用来定义规则，IPVS利用ipvsadm定义的规则工作，IPVS工作在INPUT链上,
            当数据包到达INPUT链时，首先会被IPVS检查，如果数据包里面的目的地址及端口没有在规则里面，那么这条数据包将被放行至用户空间。
            4.如果数据包里面的目的地址及端口在规则里面，那么这条数据报文将被修改目的地址为事先定义好的后端服务器，并送往POSTROUTING链。
            5.最后经由POSTROUTING链发往后端服务器。  
        NAT、DR、TUN模型原理：
            1、NAT模型：
                ①.客户端将请求发往前端的负载均衡器，请求报文源地址是CIP，目标地址为VIP。
                ②.负载均衡器收到报文后，它将客户端请求报文的目标地址改为了后端服务器的RIP地址并将报文根据算法发送出去。
                ③.报文送到Real Server后，由于报文的目标地址是自己，所以会响应该请求，并将响应报文返还给LVS。
                ④.然后lvs将此报文的源地址修改为本机并发送给客户端。（注意：在NAT模式中，Real Server的默认网关必须指向LVS，否则报文无法送达客户端。
                  NAT 模式修改的是dst IP，直接走switch或pub不需要修改MAC，所以不需要VIP和realserver同在一个网段内）
            2、DR模型:
                ①.客户端将请求发往前端的负载均衡器，请求报文源地址是CIP，目标地址为VIP。
                ②.负载均衡器收到报文后，它将客户端请求报文的源MAC地址改为自己DIP的MAC地址，目标MAC改为了RIP的MAC地址，并将此包发送给RS。
                ③.RS发现请求报文中的目的MAC是自己，就会将次报文接收下来，处理完请求报文后，将响应报文通过lo接口送给eth0网卡直接发送给客户端。
                == 注意：LVS 的VIP 和 realserver 必须在同一个网段，不然广播后所有的包都会丢掉。DR模式下需要LVS和RS集群绑定同一个VIP（RS通
                   过将VIP绑定在loopback实现）,同时设置lo接口的VIP不能响应本地网络内的arp请求,即抑制ARP请求，因为要保证让Direct-Server收
                   到报文,而不是realserver收到报文。（ARP是解决同一个局域网上的主机或路由器的IP地址和硬件地址的映射问题）
            3、TUN模型：
                ①.客户端将请求发往前端的负载均衡器，请求报文源地址是CIP，目标地址为VIP。
                ②.负载均衡器收到报文后，它将在客户端请求报文的首部再封装一层IP报文,将源地址改为DIP，目标地址改为RIP,并将此包发送给RS。
                ③.RS收到请求报文后，会首先拆开第一层封装,然后发现里面还有一层IP首部的目标地址是自己lo接口上的VIP，所以会处理次请求报文，
                并将响应报文通过lo接口送给eth0网卡直接发送给客户端。
                == 注意：需要设置lo接口的VIP不能在共网上出现；必须在所有的realserver 机器上面绑定VIP的IP地址；realserver的包通信通过
                   TUNNEL模式，不管是内网和外网都能通信，所以不需要lvs vip跟realserver 在同一个网段内；UNNEL 模式走的隧道模式，所以运
                   维起来比较难，所以一般不用
                   
    常用调度算法：
        1） 轮询（rr）：按照请求顺序轮流分发到后端RS
        2） 加权轮询（wrr）：权值高的获得的任务更多
        3） 最小连接数（lc）：动态的将请求建立到连接数较少的RS上
        4） 加权最小连接数（wlc）：调度器自动询问RS的真实负载情况，并动态的调整权
        5） 目标地址散列：根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，
            将请求发送到该服务器，否则返回空
     
    LVS实践中的积累：
        1. lvs 不会主动断开连接
           比如 client 通过LVS VIP 采用长链接方式访问server，即使我们把LVS下面的realserver的status.html文件删除了；本来通过LVS 跟
           这台realserver 链接的请求也不会被LVS强制断开；要等到client自己断开连接；【在client主动断开期间；client可以跟这台realserver 正常通信】；
           这样有个好处时在网络抖动时；LVS不会频繁的流量截断到不同的RS上面

-----------------------------------------------------------------------------------------------------------------------------------------
           
Keeplived原理：
    keepalived中优先级高的节点为MASTER。MASTER其中一个职责就是响应VIP的ARP包，将VIP和MAC地址映射关系告诉局域网内其他主机，同时，它还会以多播的
    形式向局域网中发送VRRP通告，告知自己的优先级。网络中的所有BACKUP节点只负责处理MASTER发出的多播包，当发现MASTER的优先级没自己高，或者没收到
    MASTER的VRRP通告时，BACKUP将自己切换到MASTER状态，然后做MASTER该做的事（1.响应ARP包；2.发送VRRP通告）。
    
    VRRP协议：
        VRRP，Virtual Router Redundancy Protocol，虚拟路由器冗余协议，是为了解决局域网中配置默认网关的单点失效问题。VRRP将局域网的一组路由器
       （包括一个Master即活动路由器和若干个Backup即备份路由器）组织成一个虚拟路由器，称之为一个备份组。这个虚拟的路由器拥有自己的IP地址
        10.100.10.1（这个IP地址可以和备份组内的某个路由器的接口地址相同，相同的则称为ip拥有者），备份组内的路由器也有自己的IP 地址
       （如Master的IP地址为10.100.10.2，Backup 的IP地址为10.100.10.3）。局域网内的主机仅仅知道这个虚拟路由器的IP地址10.100.10.1，
        而并不知道具体的Master路由器的IP地址10.100.10.2以及Backup路由器的IP地址10.100.10.3。它们将自己的缺省路由下一跳地址设置为该虚拟路由器的
        IP地址10.100.10.1。于是，网络内的主机就通过这个虚拟的路由器来与其它网络进行通信。如果备份组内的Master路由器坏掉，Backup路由器将会通过选
        举策略选出一个新的Master路由器，继续向网络内的主机提供路由服务，从而实现网络内的主机不间断地与外部网络进行通信。VRRP说白了就是实现IP地址
        漂移的，是一种容错协议。Master路由器周期性地发送VRRP报文，在虚拟路由器中公布其配置信息（优先级priority选项等）和工作状况。Backup路由器通
        过接收到VRRP报文的情况来判断Master路由器是否工作工常。
        备注：配置VRRP时，需要路由器支持VRRP功能。同时VRRP管理的机器，要在同一个二层网络下，或同一个VLAN下。
    keeplived架构原理：
        a) core
            是keepalived的核心，负责主进程的启动和维护，全局配置文件的加载解析等
        b) check
            负责healthchecker(健康检查)，包括了各种健康检查方式，以及对应的配置的解析包括LVS的配置解析
        c) vrrp
            VRRPD子进程，VRRPD子进程就是来实现VRRP协议的
    keepalived主从切换:
        主从切换需要将backup配置文件的priority选项的值调整的比master高50个点，然后reload配置文件就可以切换了。同时你也可以将master的
        keepalived停止，这样也可以进行主从切换。
